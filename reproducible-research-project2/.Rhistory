a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
library()
library(devtools)
library(devtools)
library(tools)
librar
clearPushBack()
demo()O
demo()
install.packages("slidify")
require(devtools)
install.packages("devtools")
install.packages("KernSmooth")
library("KernSmooth")
library("devtools")
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidifyLibraries')
R.version.string
install.packages("swirl")
packageVersion("swirl")
library("swirl")
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
bye()
swirl()
z <- c(1.1,9,3.14)
?c
z
z, 555, z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
print(my_sqrt)
my_sqrt
my_div <- (z/my_sqrt)
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0m10,100)
c(1,2,3,4) + c(0,10,100)
swirl()
z*2+1000
my_div
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
clear()
setwd("~/Desktop/Coursera/")
data <- read.table(file="./data/household_power_consumption.txt", header = TRUE)
str(data)
data <- read.table(file="./data/household_power_consumption.txt", header = TRUE, sep = ";")
str(data)
data$Date[1]
data$Date[1][1]
data$Date[1][1][1]
strptime(data[1 ,])
strptime(data$Date)
strptime(data$Date, format = "%Y-%m-%d")
dmy(data$Date)
library("lubridate")
dmy(data$Date)
data[mdy(data$Date) == '2007-02-01', ]
selected <- data[mdy(data$Date) == '2007-02-01', ]
head(selected)
selected <- data[, mdy(data$Date) == '2007-02-01']
selected <- data[data$Date == "01/02/2007", ]
head(selected)
selected <- data[data$Date == "01/01/2007", ]
head(selected)
data[1]
data[1, ]
data[1, ]
new_data <- data[1, ]
new_data
strptime(paste(new_data$Date, new_data$Time), format = "%Y-%m-%d %H:%M:%S")
paste(new_data$Date, new_data$Time)
new_data <- paste(new_data$Date, new_data$Time)
new_data
strptime(new_data)
strptime(new_data, format = "%Y-%m-%d %H:%M:%S")
strptime(new_data, format = "$d/$m/$Y %H:%M:%S")
strptime(new_data, format = "%d/%m/%Y %H:%M:%S")
date <- strptime(new_data, format = "%d/%m/%Y %H:%M:%S")
class(data)
date.as.Date()
as.Date(date)
date <- as.Date(date)
class(date)
str(data)
data[to.Date(strptime(data$Date, "%d/%m/%Y")) == "2007-02-01"]
data[as.Date(strptime(data$Date, "%d/%m/%Y")) == "2007-02-01"]
data[as.Date(strptime(data$Date, "%d/%m/%Y")) == "2007-001-01"]
data[as.Date(strptime(data$Date, "%d/%m/%Y")) >= "2007-01-01"]
as.Date(strptime(data$Date, "%d/%m/%Y"))
as.Date(strptime(data$Date, "%d/%m/%Y")) >= "2007-01-01"
as.Date(strptime(data$Date, "%d/%m/%Y")) >= "2007-02-01" & as.Date(strptime(data$Date, "%d/%m/%Y")) <= "2007-02-02"
data[as.Date(strptime(data$Date, "%d/%m/%Y")) >= "2007-02-01" & as.Date(strptime(data$Date, "%d/%m/%Y")) <= "2007-02-02"]
is.na() = "?"
?na
?na.omit
na.omit(data)
?"complete.cases"
data<- read.table("./data/household_power_consumption.txt", sep = ";", header = TRUE, na.strings = c("?", "NA"))
data[,complete.cases(data)]
data[complete.cases(data), ]
new_data <- data[cocomplete.cases(data)]
new_data <- data[complete.cases(data)]
sum(complete.cases(data))
sum(complete.cases(data))
new_data <- na.omit(data)
str(new_data)
data<- read.table("./data/household_power_consumption.txt", sep = ";", header = TRUE)
str(data)
data<- read.table("./data/household_power_consumption.txt", sep = ";", header = TRUE, na.strings = c("?", "NA"))
str(data)
data <- na.omit(data)
data$Date <- as.Date(strptime(data$Date, "%d/%m/%Y"))
str(data)
data <- data[data$Date >= as.Date("2007-02-01") & data$Date <= as.Date("2007-02-02"), ]
str(data)
hist(data$Global_Active_power)
hist(data$Global_active_power)
hist(data$Global_active_power, col= "red")
hist(data$Global_active_power, col= "red", xlab = "Global Active Power (kilowatts)")
hist(data$Global_active_power, col= "red", xlab = "Global Active Power (kilowatts)", legend = "Data")
hist(data$Global_active_power, col= "red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
hist(data$Global_active_power, col= "red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
png("plot1.png")
hist(data$Global_active_power, col= "red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
dev.off()
setwd("~/Desktop/datascience/ExData_Plotting1/")
source("plot1.R")
source("plot1.R")
source("plot1.R")
plot(required_data$Date, required_data$Global_active_power)
source("plot1.R")
plot(required_data$Date, required_data$Global_active_power)
str(required_data)
source("plot1.R")
plot(paste(required_data$Date, required_data$Time), required_data$Global_active_power)
var <- paste(required_data$Date, required_data$Time)
var
class(var)
as.Date(var)
strptime(var)
strptime(var, %Y-%m-%d %H:%M:%S")
strptime(var, "%Y-%m-%d %H:%M:%S")
required_data$date_time <- strptime(var, "%Y-%m-%d %H:%M:%S")
plot(required_data$date_time, required_data$Global_active_power)
plot(required_data$date_time, required_data$Global_active_power, type = 1)
?plot
plot(required_data$date_time, required_data$Global_active_power, type = "p")
plot(required_data$date_time, required_data$Global_active_power, type = "l")
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
plot(required_data$date_time, required_data$Sub_metering_1, type = "n")
str(required_data)
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
str(data)
str(required_data)
data<- read.table("./household_power_consumption.txt",
sep = ";",
header = TRUE,
na.strings = c("?"))
str(data)
data<- read.table("./household_power_consumption.txt",
sep = ";",
header = TRUE)
str(data)
data$Date <- as.Date(strptime(data$Date, "%d/%m/%Y"))
required_data <- data[data$Date >= as.Date("2007-02-01") & data$Date <= as.Date("2007-02-02"), ]
str(required_data)
plot(required_data$date_time, required_data$Sub_metering_1, type = "n")
data<- read.table("./household_power_consumption.txt",
+                   sep = ";",
+                   header = TRUE,
+                   na.strings = c("?"), )
?read.table
data<- read.table("./household_power_consumption.txt",
sep = ";",
header = TRUE,
na.strings = c("?"), colClasses = "character")
str(data)
na.omit(data)
data <- na.omit(data)
str(data)
summary(data$Sub_metering_1)
summary(as.numeric(data$Sub_metering_1))
source('~/Desktop/datascience/ExData_Plotting1/plot2.R')
str(required_data)
plot(required_data$date_time,
required_data$Global_active_power,
type = "l",
ylab = "Global Active Power (kilowatts)",
xlab = "")
plot(required_data$date_time, required_data$Sub_metering_1, type = "n")
summary(as.numeric(required_data$Sub_metering_1))
plot(required_data$date_time, as.numeric(required_data$Sub_metering_1), type = "n")
plot(required_data$date_time, as.numeric(required_data$Sub_metering_1), type = "l")
plot(required_data$date_time, required_data$Sub_metering_1, type = "l")
line(required_data$date_time, required_data$Sub_metering_2, col= "red")
lines(required_data$date_time, required_data$Sub_metering_2, col= "red")
lines(required_data$date_time, required_data$Sub_metering_3, col= "blue")
source('~/Desktop/datascience/ExData_Plotting1/plot3.R')
example("DISPLAY")
legend("topleft", lty = c(1,1,1), col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", lty = c(1,1,1), col = c("black", "red", "blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
source('~/Desktop/datascience/ExData_Plotting1/plot3.R')
par(mfcol = c(2,2))
plot(required_data$date_time,
required_data$Global_active_power,
type = "l",
ylab = "Global Active Power (kilowatts)",
xlab = "")
plot(required_data$date_time,
required_data$Sub_metering_1,
type = "l",
ylab = "Energy sub metering",
xlab = "")
lines(required_data$date_time, required_data$Sub_metering_2, col= "red")
lines(required_data$date_time, required_data$Sub_metering_3, col= "blue")
legend("topright",
lty = c(1,1,1),
col = c("black", "red", "blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
source('~/Desktop/datascience/ExData_Plotting1/plot4.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?rep
?image
?t
set.seed(12345)
par(mar = rep(0.2,4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){}
for(i in 1:40){}
for(i in 1:40){
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
names(hh)
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, pch=19)
plot(colMeans(dataMatrixOrdered), pch=19)
colMeans(dataMatrixOrdered)
rowMeans(dataMatrixOrdered)
plot(rowMeans(dataMatrixOrdered), pch=19)
plot(rowMeans(dataMatrixOrdered), 40:1, , pch=19)
plot(rowMeans(dataMatrixOrdered), 40:1, , pch=19)
svd1 <- svd(scale(dataMatrixOrdered))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular")
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular")
par(mar = rep(2,4))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular")
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular")
par(mar = c(1, 2))
par(mfrow = c(1, 2))
par(mfrow = c(1, 2, 1, 1))
plot(svd1$d, pch=19)
plot(svd1$d^2/sum(svd1$d^2), pch=19)
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19)
dim(dataMatrixOrdered)[1]
dataMatrixOrdered
dataMatrixOrdered*0
rep(c(0,5), 5)
rep(c(0,5), each)
rep(c(0,5), each= 5)
svd1
setwd("~/Desktop/Coursera")
if(!file.exists("repdata-data-StormData.csv")){}
bzfile("repdata-data-StormData.csv.bz2")
data <- read.csv(bzfile("repdata-data-StormData.csv.bz2"), header = TRUE)
dim(data)
head(data)
table(data$EVTYPE)
str(data)
events_data <- aggregate(EVTYPE, data, sum)
library("ggplot2")
factor(data$EVType)
factor(data$EVTYPE)
g <- ggplot(data, aes(factor(EVTYPE))) + geom_histogram(binwidth = 1000)
print(g)
g <- ggplot(data, aes(factor(EVTYPE))) + geom_histogram(binwidth = 1000, stat = "identity")
g <- ggplot(data, aes(factor(EVTYPE))) + geom_bar(stat = "identity")
print(g)
head(data, 2)
str(data)
selected_data <- select(data, BGN_DATE,EVTYPE,FATALITIES,INJURIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
library("dplyr")
selected_data <- select(data, BGN_DATE,EVTYPE,FATALITIES,INJURIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
str(selected_data)
event_injuries <- aggregate(INJURIES ~ EVTYPE, data, sum, na.rm = T)
head(event_injuries)
g <- ggplot(event_injuries, aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
print(g)
?order
?order_by
order(event_injuries)
dim(event_injuries)
order(event_injuries$INJURIES)
desc(event_injuries$INJURIES)
arrange(event_injuries, INJURIES)
?arrange
arrange(event_injuries, desc(INJURIES)
)
arrange(event_injuries, desc(INJURIES)
)
event_injuries <- arrange(event_injuries, desc(INJURIES))
event_injuries <- event_injuries[1:20, ]
event_injuries
g <- ggplot(event_injuries, aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
print(g)
barplot(event_injuries)
barplot(event_injuries$INJURIES)
barplot(event_injuries[1:10, ]$INJURIES)
barplot(event_injuries[1:10, ]$INJURIES, names=event_injuries$EVTYPE)
barplot(event_injuries[1:10, ]$INJURIES, names=event_injuries[1:10, ]$EVTYPE)
barplot(event_injuries$INJURIES, names=event_injuries$EVTYPE)
g <- ggplot(event_injuries, aes(EVTYPE, INJURIES)) + geom_bar()
print(g)
g <- ggplot(event_injuries, aes(EVTYPE, INJURIES)) + geom_bar(stat="count")
print(g)
g <- ggplot(event_injuries, aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
print(g)
g <- ggplot(event_injuries[1:10, ], aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
print(g)
g <- ggplot(event_injuries[1:10, ], aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
print(g)
qplot(EVTYPE, INJURIES, event_injuries, color = EVTYPES)
str(selected_data)
event_fatalties <- aggregate(FATALITIES ~ EVTYPE, selected_data, sum, na.rm = T)
event_fatalties <- arrange(event_fatalties, desc(INJURIES))
event_fatalties <- event_fatalties[1:10, ]
g <- ggplot(event_fatalties, aes(EVTYPE, INJURIES)) + geom_bar(stat="identity")
g + labs(title = "Top 10 Severe Weather Events for Fatalties Across USA",
x = "EVENTS")
event_fatalties <- aggregate(FATALITIES ~ EVTYPE, selected_data, sum, na.rm = T)
event_fatalties <- arrange(event_fatalties, desc(FATALITIES))
event_fatalties <- event_fatalties[1:10, ]
g <- ggplot(event_fatalties, aes(EVTYPE, FATALITIES)) + geom_bar(stat="identity")
g + labs(title = "Top 10 Severe Weather Events for Fatalties Across USA",
x = "EVENTS")
str(selected_data)
str(selected_data$PROPDMG)
str(selected_data$PROPDMGEXP)
table(selected_data$PROPDMGEXP)
event_fatalties <- aggregate(FATALITIES + INJURIES  ~ EVTYPE, selected_data, sum, na.rm = T)
event_fatalties <- arrange(event_fatalties, desc(FATALITIES))
event_fatalties <- event_fatalties[1:10, ]
g <- ggplot(event_fatalties, aes(EVTYPE, FATALITIES)) + geom_bar(stat="identity")
g + labs(title = "Top 10 Severe Weather Events for Fatalties Across USA",
x = "EVENTS")
pop_health <- aggregate(FATALITIES + INJURIES  ~ EVTYPE, selected_data, sum, na.rm = T)
head(pop_health)
names(pop_health) <- c("EVENTS", "HARM")
head(pop_health)
pop_health <- arrange(pop_health, desc(HARM))
pop_health <- pop_health[1:10, ]
pop_health
harm_pop_health <- aggregate(FATALITIES + INJURIES  ~ EVTYPE, selected_data, sum, na.rm = T)
names(harm_pop_health) <- c("EVENTS", "HARM")
harm_pop_health <- arrange(harm_pop_health, desc(HARM))
harm_pop_health <- harm_pop_health[1:10, ]
g <- ggplot(harm_pop_health, aes(EVTYPE, HARM)) + geom_bar(stat="identity")
g + labs(title = "Top 10 severe weather events across USA that are most harmful with respect to population health.",
x = "Weather Events", y="Sum of Injuries and Fatalties" )
harm_pop_health <- aggregate(FATALITIES + INJURIES  ~ EVTYPE, selected_data, sum, na.rm = T)
names(harm_pop_health) <- c("EVENTS", "HARM")
harm_pop_health <- arrange(harm_pop_health, desc(HARM))
harm_pop_health <- harm_pop_health[1:10, ]
g <- ggplot(harm_pop_health, aes(EVENTS, HARM)) + geom_bar(stat="identity")
g + labs(title = "Top 10 severe weather events across USA that are most harmful with respect to population health.",
x = "Weather Events", y="Sum of Injuries and Fatalties" )
barplot(harm_pop_health, names = harm_pop_health$EVENTS)
barplot(harm_pop_health$HARM, names = harm_pop_health$EVENTS)
harm_pop_health <- aggregate(FATALITIES + INJURIES  ~ EVTYPE, selected_data, sum, na.rm = T)
names(harm_pop_health) <- c("EVENTS", "HARM")
harm_pop_health <- arrange(harm_pop_health, desc(HARM))
harm_pop_health <- harm_pop_health[1:10, ]
g <- ggplot(harm_pop_health, aes(EVENTS, HARM)) + geom_bar(stat="identity")
g + labs(title = "Top 10 severe weather events across USA that are most harmful with respect to population health.",
x = "Weather Events", y="Sum of Injuries and Fatalties" )
transform_data <- function(dataset = selected_data){
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP <- as.character(dataset$PROPDMGEXP)
dataset$PROPDMGEXP = gsub("\\-|\\+|\\?","0",dataset$PROPDMGEXP)
dataset$PROPDMGEXP = gsub("B|b", "9", dataset$PROPDMGEXP)
dataset$PROPDMGEXP = gsub("M|m", "6", dataset$PROPDMGEXP)
dataset$PROPDMGEXP = gsub("K|k", "3", dataset$PROPDMGEXP)
dataset$PROPDMGEXP = gsub("H|h", "2", dataset$PROPDMGEXP)
dataset$PROPDMGEXP <- as.numeric(dataset$PROPDMGEXP)
dataset$PROPDMGEXP[is.na(dataset$PROPDMGEXP)] = 0
dataset$PROP_DATA<- dataset$PROPDMG * 10^dataset$PROPDMGEXP
dataset$CROPDMGEXP <- as.character(dataset$CROPDMGEXP)
dataset$CROPDMGEXP = gsub("\\-|\\+|\\?","0",dataset$CROPDMGEXP)
dataset$CROPDMGEXP = gsub("B|b", "9", dataset$CROPDMGEXP)
dataset$CROPDMGEXP = gsub("M|m", "6", dataset$CROPDMGEXP)
dataset$CROPDMGEXP = gsub("K|k", "3", dataset$CROPDMGEXP)
dataset$CROPDMGEXP = gsub("H|h", "2", dataset$CROPDMGEXP)
dataset$CROPDMGEXP <- as.numeric(dataset$CROPDMGEXP)
dataset$CROPDMGEXP[is.na(dataset$CROPDMGEXP)] = 0
dataset$CROP_DATA<- dataset$CROPDMG * 10^dataset$CROPDMGEXP
return(dataset)
}
selected_data <- transform_data(selected_data)
enonomic_harm <- aggregate(PROP_DATA + CROP_DATA ~ EVTYPE, selected_data, sum, na.rm = T)
names(enonomic_harm) <- c("EVENTS", "HARM")
enonomic_harm <- arrange(enonomic_harm, desc(HARM))
enonomic_harm <- enonomic_harm[1:10, ]
g <- ggplot(enonomic_harm, aes(EVENTS, HARM)) + geom_bar(stat="identity")
g + labs(title = "Top 10 severe weather events across USA that have the greatest economic consequences.",
x = "Weather Events", y="Sum of Damages to Property and Crops")
enonomic_harm
setwd("~/Desktop/git/datasciencecoursera/Reproducible_Research_Project2")
